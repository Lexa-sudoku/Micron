import html
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, CallbackContext
from parsers.compile import parsing


async def start(update: Update, context: CallbackContext) -> None:
    await update.message.reply_text('–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞, –∏ —è –Ω–∞–π–¥—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.')


async def handle_message(update: Update, context: CallbackContext) -> None:
    try:
        searching_message = await update.message.reply_text('–ò—â—É –¥–∞–Ω–Ω—ã–µ...')

        product_name = update.message.text.strip()
        output_results = await parsing(product_name)

        # –°–±–æ—Ä–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
        results = []
        for site_name, products in output_results.items():
            results.append(f"<b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è {html.escape(site_name)}:</b>")

            if products:
                for product in products:
                    name = html.escape(product.get("name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–æ–≤–∞—Ä"))
                    url = product.get("url", "")
                    availability = html.escape(str(product.get("availability", "-")))
                    price = html.escape(str(product.get("price", "-")))

                    name_with_link = f'<a href="{html.escape(url)}">{name}</a>' if url else name

                    details = [
                        f"üîπ {name_with_link}",
                        f"üì¶ –ù–∞–ª–∏—á–∏–µ: {availability}",
                        f"üí∞ –¶–µ–Ω–∞: {price}"
                    ]
                    results.append("\n".join(details) + "\n")
            else:
                results.append("‚ö†Ô∏è <i>–†–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ</i>")

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ —á–∞—Å—Ç—è–º (–Ω–∞ —Å–ª—É—á–∞–π –±–æ–ª—å—à–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–µ–∫—Å—Ç–∞)
        max_len = 4096
        message = "\n".join(results)
        for i in range(0, len(message), max_len):
            await update.message.reply_text(
                message[i:i + max_len],
                parse_mode="HTML",
                disable_web_page_preview=True
            )

        await searching_message.delete()
        await update.message.reply_text('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:', parse_mode="HTML")

    except Exception as e:
        await update.message.reply_text(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ: {html.escape(str(e))}', parse_mode="HTML")
        await update.message.reply_text('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:', parse_mode="HTML")


def main():
    token = 'ur token'
    app = Application.builder().token(token).build()

    app.add_handler(CommandHandler('start', start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    app.run_polling()


if __name__ == '__main__':
    main()
